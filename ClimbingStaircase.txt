You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

class Solution {
    public int climbStairs(int n) {
        if (n == 1) {
            return 1;  
        }
        if (n == 2) {
            return 2;  
        }

        int first = 1, second = 2;

        for (int i = 3; i <= n; i++) {
            int current = first + second;  
            first = second;  
            second = current;  
        }
        
        return second;
    }
}


Explanation of the Code:

Base Cases:
If n == 1, return 1. There's only one way to climb one step, which is just to take a single 1-step.
If n == 2, return 2. There are two ways to climb two steps:
Take two 1-steps.
Take one 2-step.

Dynamic Programming Approach:
We use two variables, first and second, to store the number of ways to reach the (i-2)th and (i-1)th steps, respectively.
Initially, first is set to 1 (representing dp[0], the ground, with 1 way to stay there).
second is set to 2 (representing dp[1] and dp[2], which can be reached in two ways).

Iteration:
Start a loop from 3 to n, updating the first and second values to calculate the number of ways to reach the current step.
The current step can be reached either from the previous step or the step before that, so the number of ways to reach the current step is the sum of the number of 
ways to reach the previous two steps (first + second).
After calculating the current step, we update the first and second values for the next iteration:
first is updated to the previous second (i.e., we move the second value to first).
second is updated to the current step's value (the sum of first and second).

Final Step:
After the loop, the variable second will hold the number of ways to reach the nth step. We return second as the final result.

Time Complexity --- O(n)
Space Complexity --- O(1)

