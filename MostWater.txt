You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).
Find two lines that together with the x-axis form a container, such that the container contains the most water.
Return the maximum amount of water a container can store.
Notice that you may not slant the container.

class Solution {
    public int maxArea(int[] height) {
        int left = 0;                    
        int right = height.length - 1;   
        int maxArea = 0;

        while (left < right) {
            int width = right - left;
            int h = Math.min(height[left], height[right]);
            int area = width * h;
            maxArea = Math.max(maxArea, area);

            if (height[left] < height[right]) {
                left++;
            } else {
                right--;
            }
        }

        return maxArea;
    }
}

How it Works:
Start with two pointers at both ends of the array.
At each step, calculate the area between the two lines.
Update the maxArea if the current area is larger.
Move the pointer pointing to the shorter line inward, because moving the taller line inward canâ€™t increase the area.
Repeat until both pointers meet.

Time Complexity: O(n)
Space Complexity:O(1)