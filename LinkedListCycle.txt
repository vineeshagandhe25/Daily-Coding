Given head, the head of a linked list, determine if the linked list has a cycle in it.
There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. 
Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.
Return true if there is a cycle in the linked list. Otherwise, return false

To detect if a linked list has a cycle, the most efficient approach is to use Floyd's Cycle Detection Algorithm (also known as the Tortoise and Hare algorithm). 
This algorithm uses two pointers:
A slow pointer that moves one step at a time.
A fast pointer that moves two steps at a time.
If there is a cycle, the fast pointer will eventually meet the slow pointer. If there is no cycle, the fast pointer will reach the end of the list.

public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next;          
            fast = fast.next.next;    

            if (slow == fast) {
                return true;          
            }
        }

        return false;  
    }
}
Time Complexity: O(n)
Space Complexity: O(1)