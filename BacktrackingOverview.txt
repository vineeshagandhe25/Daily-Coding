Overview of Backtracking
Backtracking is a systematic method for solving problems by exploring all possible options in a recursive manner. 
It is often used for constraint satisfaction problems, where the solution must meet specific conditions. 
Backtracking is like trying out all potential solutions, backing up whenever you hit a dead end, and continuing with the next possible path.

Key Concepts ---
Recursive Approach:
Backtracking relies on recursion to explore all possibilities. At each step, decisions are made, and if the solution is not feasible, the algorithm "backtracks" to try other options.

State Space Tree:
The process of solving the problem can be visualized as a tree structure, where:
Each node represents a state or decision.
Each edge represents a choice or step to reach a new state.

* Pruning:
        To optimize, backtracking eliminates paths early that cannot lead to a solution, known as pruning. This reduces unnecessary computation.

* Feasibility Check:
        Before moving forward, backtracking ensures that the current step is valid and does not violate constraints.

Backtracking Algorithm Steps
Choose: Select a potential choice to explore.
Explore: Recursively explore this choice by moving deeper into the state space tree.
Un-choose (Backtrack): If the choice leads to a dead end, revert the decision and try a different path.
Characteristics of Problems Solved by Backtracking
Decision Problems: Does a solution exist?
Optimization Problems: Find the best solution.
Enumeration Problems: List all possible solutions.

Common Applications
Constraint Satisfaction Problems:
-> N-Queens Problem
-> Sudoku Solver
-> Combinatorial Problems:
-> Generating Permutations
-> Subset Sum Problem
-> Partition Problems

Graph Problems:
-> Hamiltonian Path and Circuit
-> Knight’s Tour

String Problems:
-> Word Search in a Matrix

Example: Solving the N-Queens Problem
The problem is to place N queens on an N×N chessboard so that no two queens threaten each other.
Input: Size of the board, N.
Output: All valid configurations of N queens.
Approach:
Start placing queens row by row.
For each row, try placing a queen in each column.
Check if the current placement is valid:
No other queen in the same column.
No other queen in the diagonals.
If valid, move to the next row.
If not valid, backtrack and try the next column in the previous row.
Time Complexity
The time complexity of backtracking depends on the problem and the pruning efficiency. In the worst case:
Brute-force backtracking: 
O(bd), where b is the branching factor and d is the depth of the recursion tree.
Optimized backtracking with pruning: Significantly reduced but problem-dependent.

----- Need to learn about pruning and should work more on different problems