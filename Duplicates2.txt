Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

To solve the problem of deleting duplicates from a sorted linked list, you can iterate through the linked list, comparing the current node with the next node. 
If the value of the current node is equal to the value of the next node, you remove the next node by adjusting the next pointer. 
If the value is different, you just move to the next node.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if (head == null) {
            return head;
        }
        
        ListNode current = head;
        
        while (current != null && current.next != null) {
            if (current.val == current.next.val) {
                current.next = current.next.next;
            } else {
                current = current.next;
            }
        }
        
        return head;
    }
}

Time complexity ---  O(n) where n is the number of nodes in the linked list.
Space complexity --- O(1)