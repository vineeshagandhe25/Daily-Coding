/*Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Note: A leaf is a node with no children. */ 

Approach:
Base Case: If the root is null, return 0.
Recursion (DFS):
If either left or right child is null, recursively find the depth of the non-null child.
Otherwise, return the minimum of both subtree depths + 1 (for the current node).
BFS Approach (Optional):
Use a queue to traverse level by level and return when the first leaf node is encountered.
 
public class TreeNode {
     int val;
      TreeNode left;
     TreeNode right;
      TreeNode() {}
     TreeNode(int val) { this.val = val; }
      TreeNode(int val, TreeNode left, TreeNode right) {
          this.val = val;
          this.left = left;
         this.right = right;
     }
  }

class Solution {
    public int minDepth(TreeNode root) {
      if (root == null) return 0;
        
        // If one of the children is null, we must take the depth of the non-null child
        if (root.left == null) return 1 + minDepth(root.right);
        if (root.right == null) return 1 + minDepth(root.left);
        
        // If both children are present, return the minimum depth of both
        return 1 + Math.min(minDepth(root.left), minDepth(root.right));  
    }
}

Time Complexity: O(N).
Space Complexity: O(H) where ùêª is the height of the tree (recursive stack space).

