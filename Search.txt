There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is 
[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

Algorithm:
Initialize left = 0 and right = nums.length - 1.

While left <= right:

Compute mid = (left + right) // 2.

If nums[mid] == target, return mid.

Determine which half is sorted:

If nums[left] <= nums[mid], the left half is sorted:

If nums[left] <= target < nums[mid], move to the left half: right = mid - 1.

Else, move to the right half: left = mid + 1.

Else, the right half is sorted:

If nums[mid] < target <= nums[right], move to the right half: left = mid + 1.

Else, move to the left half: right = mid - 1.

If not found, return -1.

class Solution {
    public int search(int[] nums, int target) {
        int left = 0, right = nums.length - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (nums[mid] == target)
                return mid;

            if (nums[left] <= nums[mid]) {
                if (nums[left] <= target && target < nums[mid])
                    right = mid - 1;
                else
                    left = mid + 1;
            }

            else {
                if (nums[mid] < target && target <= nums[right])
                    left = mid + 1;
                else
                    right = mid - 1;
            }
        }

        return -1 ;
    }
} 

Time complexity = O(log n)
Space complexity = O(1) 