You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. 
The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.

Increment the large integer by one and return the resulting array of digits.

class Solution {
    public int[] plusOne(int[] digits) {
        for (int i = digits.length - 1; i >= 0; i--) {
            
            if (digits[i] < 9) {
                digits[i]++;
                return digits;
            }
            
            digits[i] = 0;
        }
        
       
        int[] newDigits = new int[digits.length + 1];
        newDigits[0] = 1;
        
        
        return newDigits;
    }
}

Explanation:
Loop from the last digit: We start from the least significant digit (the last element of the digits array).

Check if the digit is less than 9: If the current digit is less than 9, we simply increment that digit by 1 and return the array as the result.

Handle carry-over for 9: If the current digit is 9, we set it to 0 and move to the next more significant digit (to the left).

Handle the carry from the most significant digit: If we go through all the digits and each one was 9, we end up with an array of all zeros. 
In this case, we need to create a new array of length digits.length + 1 and set the most significant digit to 1 (since the carry has to be added to the leftmost position).

Time complexity of O(n), where n is the number of digits in the input array.
Space complexity of O(n), where n is the number of digits in the input array.